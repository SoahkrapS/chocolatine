name: Chocolatine

on:
  push:
    branches-ignore:
    - "ga-ignore-*"
  pull_request:
    branches-ignore:
    - "ga-ignore-*"

env:
  MIRROR_URL: git@github.com:EpitechPromo2027/B-DOP-200-NAN-2-1-chocolatine-nicolas2.bertrand.git
  EXECUTABLES: "chocolatine"

jobs:
  check_coding_style:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run coding style checker
        run: check.sh $(pwd) $(pwd)
      - name: Coding style errors display
        run: |
          IFS=$'\n'
          set -f
          CSR_CONTENT=$(< $(pwd)/coding-style-reports.log)
          ERRORS_NBR=$(grep -c "" $(pwd)/coding-style-reports.log)
          if (( ERRORS_NBR > 0 )); then
            while read -r line; do
              echo "new line: $line"
              arr=(${line//:/ })
              echo "::error file=${arr[0]},line=${arr[1]},title="${arr[2]} coding style error"::${arr[3]}"
            done <<< "$CSR_CONTENT"
            exit 1
          fi
          echo "::notice name=Coding-style::OK"
          echo 0

  check_program_compilation:
    runs-on: ubuntu-latest  
    container:
      image: epitechcontent/epitest-docker
    needs: check_coding_style
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Launch make
        run: make
        timeout-minutes: 2
      - name: Clean the build directory
        run: make clean
      - name: Check executables
        run: |
          for executable in $(echo "${EXECUTABLES}" | tr ',' ' '); do
            if [ ! -x "${executable}" ]; then
              echo "Error: ${executable} is not executable or does not exist"
              exit 1
            fi
          done

  run_tests:
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker
    needs: check_program_compilation
    timeout-minutes: 2
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Launch tests
      run: make tests_run

  push_to_mirror:
    runs-on: ubuntu-latest
    needs: [check_coding_style, check_program_compilation, run_tests]
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Push to mirror
        uses: pixta-dev/repository-mirroring-action@v1.1.1
        with:
          target_repo_url: ${{ env.MIRROR_URL}}
          ssh_private_key: ${{ secrets.GIT_SSH_PRIVATE_KEY }}